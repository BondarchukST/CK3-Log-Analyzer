import os
import re
import json
import threading
import traceback
from pathlib import Path
from datetime import datetime
import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
import chardet

from error_classifier import ErrorClassifier, ParsedError


class CK3LogParser:
    """CK3 Log Analyzer ‚Äî –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –º–æ–¥–∞–º –∏–∑ Workshop"""

    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("CK3 Log Analyzer")
        self.root.geometry("1200x800")
        self._scanning = False
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫
        self.classifier = ErrorClassifier()
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞
        self.mod_errors = {}
        self.mod_cache = {}
        self.parsed_errors = []

        # üü¢ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–¥–≤—É—è–∑—ã—á–Ω—ã–π RU/EN)
        self.lang = tk.StringVar(value="ru")
        # –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –î–û –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è UI
        cfg_path = Path("config.json")
        if cfg_path.exists():
            try:
                with open(cfg_path, "r", encoding="utf-8") as f:
                    cfg = json.load(f)
                    if cfg.get("lang") in ("ru", "en"):
                        self.lang.set(cfg["lang"])
            except Exception:
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                
        self.translations = {
            "ru": {
                # GUI –ø–æ–¥–ø–∏—Å–∏
                "cfg": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                "logs": "–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤",
                "workshop": "–ü–∞–ø–∫–∞ Workshop",
                "browse": "–û–±–∑–æ—Ä",
                "scan": "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
                "stop": "üü• –°—Ç–æ–ø",
                "scanning": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...",
                "export": "üíæ –≠–∫—Å–ø–æ—Ä—Ç JSON",
                "open_log": "üßæ –û—Ç–∫—Ä—ã—Ç—å error.log",
                "check_conf": "üß© –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
                "show_window": "–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ",
                "exit": "–í—ã—Ö–æ–¥",
                "editor": "–†–µ–¥–∞–∫—Ç–æ—Ä",
                "ready": "–ì–æ—Ç–æ–≤–æ",

                # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
                "info_actions": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è",
                "file": "–§–∞–π–ª",
                "line": "–°—Ç—Ä–æ–∫–∞",
                "type": "–¢–∏–ø",
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ",
                "open_folder": "üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É",
                "open_file": "üìù –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
                "show_in_log": "üîç –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ error.log",
                "open_in_mod": "üìÑ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª–µ –º–æ–¥–∞",

                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                "no_selection": "–ù–µ—Ç –≤—ã–±–æ—Ä–∞",
                "select_error": "–í—ã–±–µ—Ä–∏—Ç–µ –æ—à–∏–±–∫—É –≤ –¥–µ—Ä–µ–≤–µ.",
                "no_file": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "no_error_log": "–§–∞–π–ª error.log –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                "no_data": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "not_found": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                "no_error": "–ù–µ—Ç –æ—à–∏–±–∫–∏",
                "directory": "–≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è",
                "choose_node": "–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ –æ—à–∏–±–æ–∫.",
                "no_mod": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥ –¥–ª—è {file}",
                "missing_dir": "–ü—É—Ç—å '{path}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {mod}",
                "analysis_done": "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                "analysis_start": "‚ñ∂Ô∏è –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –æ—à–∏–±–æ–∫",
                "analysis_stop": "‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
                "analysis_error": "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                "export_done": "–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:",
                "export_no_data": "–ü–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.",
                "export_success": "–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}",
                "export_failed": "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {err}",
                "warn_no_data": "–ü–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.",
                "no_link": "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤ error.log", 
                "select_errorline": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏, –∞ –Ω–µ –º–æ–¥ –∏–ª–∏ —Ñ–∞–π–ª.",
                "editor_not_found": "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –æ—Ç–∫—Ä—ã—Ç {file}",
                "notepadpp_not_found": "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω Notepad++. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PATH –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É.",
                "notepad_line_jump": "‚ÑπÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Notepad –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ.",
                "file_opened_no_jump": "‚ö†Ô∏è –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä–æ–∫–µ: {file}",
                "file_open_error": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è {file}: {err}",
                "config_loaded": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ config.json –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                "config_load_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {err}",
                "config_saved": "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (config.json).",
                "config_save_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config.json: {err}",
                "copied_to_clipboard": "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {text}",
                "close": "–ó–∞–∫—Ä—ã—Ç—å",                
                "scan_stop": "‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
                "log_not_found": "‚ùå error.log –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –≤ 'Logs Folder'.",
                "log_read": "üìñ –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–∞: {file}",
                "log_read_failed": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å error.log (—Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω).",
                "classify_start": "‚ñ∂Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫...",
                "classify_empty": "‚ö†Ô∏è –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–≥–µ.",
                "classify_found": "–ù–∞–π–¥–µ–Ω–æ {count} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...",
                "classify_cats": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {stats}",
                "workshop_not_found": "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ Workshop –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                "build_struct_start": "üß© –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–æ–≤...",
                "build_struct_done": "‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                "mods_found": "üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} –º–æ–¥–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ (–≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ~{errors}).",
                "analysis_done_log": "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                "analysis_failed": "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {err}",
                "workshop_index": "üìÇ –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º Workshop ({total} –º–æ–¥–æ–≤)...",
                "index_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {mod}: {err}",
                "index_done": "‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({count} –º–æ–¥–æ–≤).",
                "process_errors": "üß© –û–±—Ä–∞–±–æ—Ç–∫–∞ {count} –æ—à–∏–±–æ–∫...",
                "scan_aborted": "‚õî –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                "match_exact": "üü¢ Exact match: {file} ‚Üí {mod}",
                "match_indexed": "üü¢ Indexed match: {file} ‚Üí {mod}",
                "match_loose": "üü° Loose match: {file} ‚Üí {mod}",
                "bom_all_ok": "‚úÖ –í—Å–µ '{file}' –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É ‚Äî –æ—à–∏–±–∫–∞ –∏–∑ –ª–æ–≥–∞ —É—Å—Ç–∞—Ä–µ–ª–∞?",
                "read_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {err}",

                "mod_folder_opened": "üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–∞: {path}",
                "folder_opened": "üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {path}",
                "folder_not_found": "‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path} ‚Üí {mod}",
                "skip_dir": "‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}",
                "file_opened": "üìù –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {file}",
                "file_not_found": "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file} –≤ {mod}",

                "tray_created": "üü¢ –ò–∫–æ–Ω–∫–∞ –≤ —Ç—Ä–µ–µ —Å–æ–∑–¥–∞–Ω–∞",
                "icon_load_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {err}",
                "check_conflicts_start": "üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–æ–≤...",
                "check_conflicts_done": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ: –º–æ–¥ ‚Üí —Ñ–∞–π–ª—ã ‚Üí –¥—Ä—É–≥–∏–µ –º–æ–¥—ã.",
                "file_or_folder": "–§–∞–π–ª / –ü–∞–ø–∫–∞",
                "error_type": "–¢–∏–ø –æ—à–∏–±–∫–∏",
                "line_short": "–°—Ç—Ä–æ–∫–∞",
                "message_short": "–°–æ–æ–±—â–µ–Ω–∏–µ",
                "col_type": "–¢–∏–ø",
                "col_count": "–ö–æ–ª-–≤–æ",
                "col_mods": "–î—Ä—É–≥–∏–µ –º–æ–¥—ã",
                "col_note": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "line_opened_in": "üìÑ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–æ–∫–∞ {line} –≤: {file}",
                "found_same_name": "üü° –ù–∞–π–¥–µ–Ω –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–π —Ñ–∞–π–ª: {file}",
                "file_not_found_simple": "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}",
                "file_not_in_mod": "–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥–µ {mod}",
                "others_count": "{count} –¥—Ä—É–≥–∏—Ö",
            },

            "en": {
                # GUI labels
                "cfg": "Configuration",
                "logs": "Logs Folder",
                "workshop": "Workshop Folder",
                "browse": "Browse",
                "scan": "üîç Scan",
                "stop": "üü• Stop",
                "scanning": "Scanning...",
                "export": "üíæ Export JSON",
                "open_log": "üßæ Open error.log",
                "check_conf": "üß© Check Conflicts",
                "show_window": "Show window",
                "exit": "Exit",
                "editor": "Editor",
                "ready": "Ready",

                # Right panel
                "info_actions": "Information and Actions",
                "file": "File",
                "line": "Line",
                "type": "Type",
                "message": "Message",
                "open_folder": "üìÅ Open Folder",
                "open_file": "üìù Open File",
                "show_in_log": "üîç Show line in error.log",
                "open_in_mod": "üìÑ Open line in mod file",

                # Messages
                "no_selection": "No selection",
                "select_error": "Select an error in the tree.",
                "no_file": "File not found",
                "no_error_log": "error.log not found.",
                "no_data": "No data available",
                "not_found": "Not found",
                "no_error": "No error",
                "directory": "This is a directory",
                "choose_node": "Select a node in the error tree.",
                "no_mod": "Unable to determine mod for {file}",
                "missing_dir": "Path '{path}' does not exist in {mod}",
                "analysis_done": "‚úÖ Analysis complete.",
                "analysis_start": "‚ñ∂Ô∏è Starting error log analysis...",
                "analysis_stop": "‚õî Stopping scan...",
                "analysis_error": "‚ùå Analysis failed",
                "export_done": "Report saved:",
                "export_no_data": "Run analysis before export.",
                "export_success": "Report saved: {path}",
                "export_failed": "Export error: {err}",
                "warn_no_data": "Run analysis before export.",
                "no_link": "No reference to line in error.log", 
                "select_errorline": "Select a specific error line, not a mod or file.",
                "editor_not_found": "‚ö†Ô∏è Selected editor not found, opened {file}", 
                "notepadpp_not_found": "‚ö†Ô∏è Notepad++ not found. Check PATH or installation.",
                "notepad_line_jump": "‚ÑπÔ∏è Standard Notepad does not support jumping to a line.",
                "file_opened_no_jump": "‚ö†Ô∏è File opened without jumping to line: {file}",
                "file_open_error": "‚ùå Failed to open {file}: {err}",
                "config_loaded": "‚öôÔ∏è Config.json loaded.",
                "config_load_error": "‚ö†Ô∏è Config.json load error: {err}",
                "config_saved": "üíæ Config.json saved.",
                "config_save_error": "‚ö†Ô∏è Config.json save error: {err}",
                "copied_to_clipboard": "üìã Copied: {text}",
                "close": "Close",                
                "scan_stop": "‚õî Stop scanning...",
                "log_not_found": "‚ùå error.log not found. Choose correct folder in 'Logs Folder'.",
                "log_read": "üìñ Reading log: {file}",
                "log_read_failed": "‚ö†Ô∏è Cannot read error.log (empty or damaged).",
                "classify_start": "‚ñ∂Ô∏è Classifying errors...",
                "classify_empty": "‚ö†Ô∏è No errors found in log.",
                "classify_found": "Found {count} matches...",
                "classify_cats": "Categories: {stats}",
                "workshop_not_found": "‚ö†Ô∏è Workshop folder not found.",
                "build_struct_start": "üß© Building mod structure...",
                "build_struct_done": "‚úÖ Building structure complete.",
                "mods_found": "üì¶ Found {count} mods with errors (total records: ~{errors}).",
                "analysis_done_log": "‚úÖ Analysis complete.",
                "analysis_failed": "‚ùå Analysis failed: {err}",
                "workshop_index": "üìÇ Indexing Workshop ({total} mods)...",
                "index_error": "‚ö†Ô∏è Indexing error {mod}: {err}",
                "index_done": "‚úÖ Indexing complete ({count} mods).",
                "process_errors": "üß© Processing {count} errors...",
                "scan_aborted": "‚õî Scanning aborted by user.",
                "match_exact": "üü¢ Exact match: {file} ‚Üí {mod}",
                "match_indexed": "üü¢ Indexed match: {file} ‚Üí {mod}",
                "match_loose": "üü° Loose match: {file} ‚Üí {mod}",
                "bom_all_ok": "‚úÖ All '{file}' files have correct encoding ‚Äî log warning obsolete?",
                "read_error": "‚ö†Ô∏è Read error {file}: {err}",

                "mod_folder_opened": "üìÇ Mod folder opened: {path}",
                "folder_opened": "üìÇ Folder opened: {path}",
                "folder_not_found": "‚ö†Ô∏è Folder not found: {path} ‚Üí {mod}",
                "skip_dir": "‚ÑπÔ∏è Directory opening skipped: {path}",
                "file_opened": "üìù File opened: {file}",
                "file_not_found": "‚ö†Ô∏è File not found: {file} in {mod}",

                "tray_created": "üü¢ Tray icon created",
                "icon_load_error": "‚ö†Ô∏è Icon load error: {err}",
                "check_conflicts_start": "üß© Checking mod compatibility...",
                "check_conflicts_done": "‚úÖ Check complete. Conflicts shown: mod ‚Üí files ‚Üí other mods.",
                "file_or_folder": "File / Folder",
                "error_type": "Error Type",
                "line_short": "Line",
                "message_short": "Message",
                "col_type": "Type",
                "col_count": "Count",
                "col_mods": "Other Mods",
                "col_note": "Comment",
                "line_opened_in": "üìÑ Opened line {line} in: {file}",
                "found_same_name": "üü° Found file with same name: {file}",
                "file_not_found_simple": "‚ö†Ô∏è File not found: {file}",
                "file_not_in_mod": "File {file} not found in mod {mod}",
                "others_count": "{count} others",

            }
        }

        # GUI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.tree = None
        self.details_text = None
        self.log_text = None
        self.progress = None
        self.logs_entry = None
        self.workshop_entry = None
        
        self.status_var = tk.StringVar(value="Ready")
        self.editor_choice = tk.StringVar(value="vscode")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é VS Code
        
        # –†–∏—Å—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._setup_ui()
        self._load_config()


    def i18n(self, key):
        return self.translations[self.lang.get()].get(key, key)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _setup_ui(self):
        t = self.i18n
        menubar = tk.Menu(self.root)
        langmenu = tk.Menu(menubar, tearoff=0)

        def change_language(lang_code):
            """–ú–µ–Ω—è–µ—Ç —è–∑—ã–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ config.json"""
            self.lang.set(lang_code)
            # üíæ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –∫–æ–Ω—Ñ–∏–≥
            self._save_config()
            # üîÑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._redraw_ui()

        langmenu.add_radiobutton(label="–†—É—Å—Å–∫–∏–π", variable=self.lang, value="ru", command=lambda: change_language("ru"))
        langmenu.add_radiobutton(label="English", variable=self.lang, value="en", command=lambda: change_language("en"))
        menubar.add_cascade(label="Language", menu=langmenu)
        self.root.config(menu=menubar)    
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ–¥–∏–Ω —ç–∫—Ä–∞–Ω —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª—å—é"""
        main = ttk.Frame(self.root)
        main.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # ‚îÄ‚îÄ‚îÄ –≤–µ—Ä—Ö–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        cfg = ttk.LabelFrame(main, text=t("cfg"), padding=8)
        cfg.pack(fill=tk.X, pady=(0, 6))
        ttk.Label(cfg, text=t("logs")).grid(row=0, column=0, sticky=tk.W)
        self.logs_entry = ttk.Entry(cfg, width=70)
        self.logs_entry.grid(row=0, column=1, padx=5)
        ttk.Button(cfg, text=t("browse"), command=self._browse_logs).grid(row=0, column=2)
        ttk.Label(cfg, text=t("workshop")).grid(row=1, column=0, sticky=tk.W)
        self.workshop_entry = ttk.Entry(cfg, width=70)
        self.workshop_entry.grid(row=1, column=1, padx=5)
        ttk.Button(cfg, text=t("browse"), command=self._browse_workshop).grid(row=1, column=2)

        editor_frame = ttk.LabelFrame(cfg, text=t("editor"), padding=(5, 2))
        editor_frame.grid(row=2, column=0, columnspan=3, sticky=tk.W, pady=(8, 0))
        ttk.Radiobutton(editor_frame, text="VS Code",
                        variable=self.editor_choice, value="vscode").pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(editor_frame, text="Notepad++",
                        variable=self.editor_choice, value="notepadpp").pack(side=tk.LEFT, padx=5)

        # ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å—Ç–∞—Ç—É—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        act = ttk.Frame(main)
        act.pack(fill=tk.X, pady=5)
        self.scan_btn = ttk.Button(act, text="üîç Scan", command=self.start_scan)
        self.scan_btn.pack(side=tk.LEFT, padx=3)
        ttk.Button(act, text=t("export"), command=self.export_json).pack(side=tk.LEFT, padx=3)
        ttk.Button(act, text=t("open_log"), command=self._open_error_log).pack(side=tk.LEFT, padx=3)
        ttk.Button(act, text=t("check_conf"), command=self._check_mod_conflicts).pack(side=tk.LEFT, padx=3)
        self.progress = ttk.Progressbar(main, mode="indeterminate")
        self.progress.pack(fill=tk.X, pady=(0, 5))

        # ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –≤–∫–ª–∞–¥–∫–∏ + –ø–∞–Ω–µ–ª—å ‚îÄ‚îÄ‚îÄ
        splitter = ttk.PanedWindow(main, orient=tk.HORIZONTAL)
        splitter.pack(fill=tk.BOTH, expand=True)

        # =========== –ª–µ–≤–∞—è —á–∞—Å—Ç—å ‚Üí Notebook —Å —Ç—Ä–µ–º—è –≤–∫–ª–∞–¥–∫–∞–º–∏ ===========
        left = ttk.Frame(splitter)
        splitter.add(left, weight=5)
        notebook = ttk.Notebook(left)
        notebook.pack(fill=tk.BOTH, expand=True)
        self.notebook = notebook

        # --- –≤–∫–ª–∞–¥–∫–∞ LOG ---
        tab_log = ttk.Frame(notebook, padding=5)
        self.log_text = scrolledtext.ScrolledText(tab_log, wrap=tk.WORD)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        notebook.add(tab_log, text="üßæ  Log")

        # --- –≤–∫–ª–∞–¥–∫–∞ ERRORS ---
        tab_err = ttk.Frame(notebook, padding=5)
        tab_err.rowconfigure(0, weight=1)
        tab_err.columnconfigure(0, weight=1)

        cols = ("type", "line", "message")
        self.tree = ttk.Treeview(tab_err, columns=cols, show="tree headings")
        self.tree.heading("#0", text=t("file_or_folder"))
        self.tree.heading("type", text=t("error_type"))
        self.tree.heading("line", text=t("line_short"))
        self.tree.heading("message", text=t("message_short"))

        yscroll = ttk.Scrollbar(tab_err, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=yscroll.set)

        # üëá –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.tree.grid(row=0, column=0, sticky="nsew")
        yscroll.grid(row=0, column=1, sticky="ns")

        notebook.add(tab_err, text="üì¶  Errors by Mods")

        # --- –≤–∫–ª–∞–¥–∫–∞ CONFLICTS ---
        tab_conf = ttk.Frame(notebook, padding=5)
        tab_conf.rowconfigure(0, weight=1)
        tab_conf.columnconfigure(0, weight=1)

        # –î–µ—Ä–µ–≤–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: —Ç–µ–ø–µ—Ä—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ (–º–æ–¥ ‚Üí —Ñ–∞–π–ª—ã ‚Üí –¥—Ä—É–≥–∏–µ –º–æ–¥—ã)
        self.conf_tree = ttk.Treeview(
            tab_conf,
            columns=("type", "count", "mods", "note"),
            show="tree headings",
        )
        for c, txt, w in [
            ("type", t("col_type"), 100),
            ("count", t("col_count"), 70),
            ("mods", t("col_mods"), 300),
            ("note", t("col_note"), 280),
        ]:
            self.conf_tree.heading(c, text=txt)
            self.conf_tree.column(c, width=w, anchor="w")
        # üëá –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ "–î—Ä—É–≥–∏–µ –º–æ–¥—ã"
        self.conf_tree.bind("<Double-1>", self._on_conflict_double_click)
        
        yscroll_conf = ttk.Scrollbar(tab_conf, orient="vertical", command=self.conf_tree.yview)
        self.conf_tree.configure(yscrollcommand=yscroll_conf.set)

        # üëá –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.conf_tree.grid(row=0, column=0, sticky="nsew")
        yscroll_conf.grid(row=0, column=1, sticky="ns")

        notebook.add(tab_conf, text="üß©  Conflicts")

        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥
        notebook.select(tab_log)

        # =========== –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Üí –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π —Ñ–∞–π–ª–∞ ===========
        right = ttk.LabelFrame(splitter, text=t("info_actions"))
        splitter.add(right, weight=2)

        self.file_label = ttk.Label(right, text=f"{t('file')}: ‚Äî")
        self.file_label.pack(anchor="w", pady=(5, 0), padx=5)
        self.line_label = ttk.Label(right, text=f"{t('line')}: ‚Äî")
        self.line_label.pack(anchor="w", padx=5)
        self.type_label = ttk.Label(right, text=f"{t('type')}: ‚Äî")
        self.type_label.pack(anchor="w", padx=5)
        self.msg_label  = ttk.Label(right, text=f"{t('message')}: ‚Äî", wraplength=350)
        self.msg_label.pack(anchor="w", padx=5, pady=(0, 10))

        btns = ttk.Frame(right)
        btns.pack(fill=tk.X, pady=5, padx=5)
        ttk.Button(btns, text=t("open_folder"), command=self._open_selected_folder).pack(fill=tk.X, pady=2)
        ttk.Button(btns, text=t("open_file"), command=self._open_selected_file).pack(fill=tk.X, pady=2)
        ttk.Button(btns, text=t("show_in_log"), command=self._show_errorline_in_log).pack(fill=tk.X, pady=2)
        ttk.Button(btns, text=t("open_in_mod"), command=self._open_error_in_mod_file).pack(fill=tk.X, pady=2)

        ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN).pack(fill=tk.X)
        self.tree.bind("<<TreeviewSelect>>", self._on_tree_select)
        self._setup_copy_paste()

    def _redraw_ui(self):
        """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö."""
        # ---- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º ----
        saved_logs = self.logs_entry.get() if self.logs_entry else ""
        saved_ws = self.workshop_entry.get() if self.workshop_entry else ""
        saved_editor = self.editor_choice.get() if hasattr(self, "editor_choice") else "vscode"
        
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for widget in self.root.winfo_children():
            widget.destroy()

        # ---- –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–Ω–æ–≤–æ ----
        self._setup_ui()

        # ---- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è ----
        self.logs_entry.delete(0, tk.END)
        self.logs_entry.insert(0, saved_logs)
        self.workshop_entry.delete(0, tk.END)
        self.workshop_entry.insert(0, saved_ws)
        self.editor_choice.set(saved_editor)

        # ---- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ----
        self.root.title("CK3 Log Analyzer")
        self.status_var.set(self.i18n("ready"))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è (—á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é —Ç–æ–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å)
        if hasattr(self, "tray_icon"):
            try:
                self.tray_icon.visible = False
                self.tray_icon.stop()
            except Exception:
                pass
            from threading import Thread
            from PIL import Image
            import pystray, os, sys
            if getattr(sys, 'frozen', False):
                base_path = sys._MEIPASS
            else:
                base_path = os.path.dirname(os.path.abspath(__file__))
            icon_path = os.path.join(base_path, "icon.ico")
            try:
                image = Image.open(icon_path)
            except Exception:
                image = Image.new("RGB", (64, 64), "gray")

            menu = pystray.Menu(
                pystray.MenuItem(self.i18n("show_window"), lambda icon, item: self.root.deiconify()),
                pystray.MenuItem(self.i18n("exit"), lambda icon, item: os._exit(0))
            )
            from threading import Thread
            self.tray_icon = pystray.Icon("ck3logparser", image, "CK3 Log Analyzer", menu)
            Thread(target=self.tray_icon.run, daemon=True).start()

    def _open_error_in_mod_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –Ω—É–∂–Ω–æ–º —Ñ–∞–π–ª–µ –º–æ–¥–∞ (—Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –ø—É—Ç–∏)."""
        sel = self.tree.selection()
        if not sel:
            messagebox.showinfo(self.i18n("no_selection"), self.i18n("select_error"))
            return

        item = sel[0]
        vals = self.tree.item(item, "values")

        if not vals or len(vals) < 5:
            messagebox.showwarning(self.i18n("no_data"), self.i18n("warn_no_data"))
            return

        # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
        err_type = vals[0] if len(vals) > 0 else ""
        line_str = vals[1] if len(vals) > 1 else ""
        err_msg  = vals[2] if len(vals) > 2 else ""
        log_line = vals[3] if len(vals) > 3 else ""
        err_file = vals[4] if len(vals) > 4 else ""
        mod_id   = vals[5] if len(vals) > 5 else ""  # üü¢ —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ–º —à–µ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç

        line_num = int(line_str) if str(line_str).isdigit() else 1
        rel_path = (err_file or "").replace("\\", "/").lower().lstrip("./").strip("'")
        if not rel_path:
            parent = self.tree.parent(item)
            rel_path = self.tree.item(parent, "text").replace("\\", "/").lower()

        target_mod = self.mod_errors.get(mod_id)
        if target_mod:
            candidate = Path(target_mod["path"]) / rel_path
            if candidate.exists():
                self._open_file_at_line(candidate, line_num)
                self._log(self.i18n("line_opened_in").format(line=line_num, file=candidate))
                return

        # üîç fallback –µ—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç
        filename = Path(rel_path).name
        for mod in self.mod_errors.values():
            base = Path(mod.get("path", ""))
            for root, _, files in os.walk(base):
                for f in files:
                    if f.lower() == filename:
                        self._open_file_at_line(Path(root) / f, line_num)
                        self._log(self.i18n("found_same_name").format(file=Path(root) / f))
                        return

        messagebox.showinfo(self.i18n("not_found"), self.i18n("no_mod").format(file=rel_path))
        self._log(self.i18n("file_not_found_simple").format(file=rel_path))

    def _open_file_at_line(self, file_path, line_num=1):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ."""
        import shutil, subprocess

        editor = self.editor_choice.get()
        path_str = str(Path(file_path).resolve())

        try:
            if editor == "vscode":
                exe = shutil.which("code")
                if exe:
                    subprocess.Popen([exe, "-g", f"{path_str}:{line_num}"])
                    return

            elif editor == "notepadpp":
                # üëá –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                possible_paths = [
                    shutil.which("notepad++"),
                    r"C:\Program Files\Notepad++\notepad++.exe",
                    r"C:\Program Files (x86)\Notepad++\notepad++.exe"
                ]
                exe = next((p for p in possible_paths if p and Path(p).exists()), None)
                if exe:
                    # /multiInst ‚Äî –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ,
                    # -n<line> ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ
                    subprocess.Popen([
                        exe,
                        "-multiInst",
                        f"-n{line_num}",
                        path_str
                    ],
                    shell=False)
                    return
                else:
                    self._log(self.i18n("notepadpp_not_found"))

            elif editor == "sublime":
                exe = shutil.which("subl")
                if exe:
                    subprocess.Popen([exe, f"{path_str}:{line_num}"])
                    return

            elif editor == "notepad":
                exe = shutil.which("notepad.exe")
                if exe:
                    subprocess.Popen([exe, path_str])
                    self._log(self.i18n("notepad_line_jump"))
                    return

            # fallback
            os.startfile(file_path)
            self._log(self.i18n("file_opened_no_jump").format(file=file_path))

        except Exception as e:
            self._log(self.i18n("file_open_error").format(file=file_path, err=e))

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    def _load_config(self):
        try:
            config_path = Path("config.json")
            if config_path.exists():
                with open(config_path, "r", encoding="utf-8") as f:
                    cfg = json.load(f)
                if cfg.get("logs_path"):
                    self.logs_entry.insert(0, cfg["logs_path"])
                if cfg.get("workshop_path"):
                    self.workshop_entry.insert(0, cfg["workshop_path"])
                if cfg.get("editor") in ("vscode", "notepadpp"):
                    self.editor_choice.set(cfg["editor"])
                if cfg.get("lang") in ("ru", "en"):  # üü¢ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
                    self.lang.set(cfg["lang"])
                self._log(self.i18n("config_loaded"))
        except Exception as e:
            self._log(self.i18n("config_load_error").format(err=e))

    def _save_config(self):
        cfg = {
            "logs_path": self.logs_entry.get().strip(),
            "workshop_path": self.workshop_entry.get().strip(),
            "editor": self.editor_choice.get(),
            "lang": self.lang.get(),     # üü¢ –¥–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫
        }
        try:
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(cfg, f, ensure_ascii=False, indent=2)
            self._log(self.i18n("config_saved"))
        except Exception as e:
            self._log(self.i18n("config_save_error").format(err=e))

    def _setup_copy_paste(self):
        """–û–±—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–ö–ú –∏ Ctrl+C)"""
        menu = tk.Menu(self.root, tearoff=0)
        menu.add_command(label="Copy", command=self._copy_text)

        widgets = []
        if self.tree:
            widgets.append(self.tree)
        if hasattr(self, "log_text") and self.log_text:
            widgets.append(self.log_text)

        for widget in widgets:
            widget.bind("<Button-3>", lambda e, m=menu: m.tk_popup(e.x_root, e.y_root))
            widget.bind("<Control-c>", lambda e: self._copy_text())
            widget.bind("<Control-C>", lambda e: self._copy_text())

        if self.tree:
            self.tree.bind("<Control-c>", lambda e: self._copy_selected_tree_item())
            self.tree.bind("<Control-C>", lambda e: self._copy_selected_tree_item())            

    def _copy_selected_tree_item(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –¥–µ—Ä–µ–≤–∞"""
        sel = self.tree.selection()
        if not sel:
            return
        item = sel[0]
        # —Ç–µ–∫—Å—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏—è
        text = self.tree.item(item, "text")
        vals = self.tree.item(item, "values")
        out = text
        if vals:
            out += "  |  " + "  |  ".join(str(v) for v in vals if v)
        self.root.clipboard_clear()
        self.root.clipboard_append(out)
        self._log(self.i18n("copied_to_clipboard").format(text=out))

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOG TOOLS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _browse_logs(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤"""
        folder = filedialog.askdirectory(title=self.i18n("logs"))
        if folder:
            self.logs_entry.delete(0, tk.END)
            self.logs_entry.insert(0, folder)
            # üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            self._save_config()

    def _browse_workshop(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ Workshop"""
        folder = filedialog.askdirectory(title=self.i18n("workshop"))
        if folder:
            self.workshop_entry.delete(0, tk.END)
            self.workshop_entry.insert(0, folder)
            # üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            self._save_config()

    def _log(self, msg):
        self.log_text.insert(tk.END, msg + "\n")
        self.log_text.see(tk.END)
        self.root.update()

    def _copy_text(self):
        try:
            widget = self.root.focus_get()
            text = ""
            if isinstance(widget, (tk.Text, scrolledtext.ScrolledText)):
                try:
                    text = widget.get("sel.first", "sel.last")
                except tk.TclError:
                    text = widget.get("1.0", "end")
            self.root.clipboard_clear()
            self.root.clipboard_append(text)
        except Exception:
            pass

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANALYSIS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def start_scan(self):
        if self._scanning:
            self._scanning = False
            self._log(self.i18n("scan_stop"))
            return

        self._scanning = True
        self.progress.start()
        self.scan_btn.config(text=self.i18n("stop"))
        self.status_var.set(self.i18n("scanning"))

        threading.Thread(target=self._run_analysis, daemon=True).start()

    def _run_analysis(self):
        """–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ error.log"""
        try:
            # 1Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ error.log
            log_file = self._find_log_file()
            if not log_file:
                self._log(self.i18n("log_not_found"))
                return

            # 2Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            self._log(self.i18n("log_read").format(file=log_file))
            data = self._read_log_file(log_file)
            if not data:
                self._log(self.i18n("log_read_failed"))
                return

            # 3Ô∏è‚É£ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
            self._log(self.i18n("classify_start"))
            parsed = self.classifier.classify_block(data)
            if not parsed:
                self._log(self.i18n("classify_empty"))
                return

            # üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤ –∞—Ç—Ä–∏–±—É—Ç
            self.parsed_errors = parsed
            # —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            self.error_index = {}
            for e in parsed:
                if e.message:
                    self.error_index.setdefault(e.message.strip(), []).append(e)            

            self._log(self.i18n("classify_found").format(count=len(parsed)))

            # 3.1Ô∏è‚É£ –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cat_stat = {}
            for e in parsed:
                cat_stat[e.category] = cat_stat.get(e.category, 0) + 1
            sorted_cats = ', '.join(f"{k}: {v}" for k, v in sorted(cat_stat.items()))
            self._log(self.i18n("classify_cats").format(stats=sorted_cats))

            # 4Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Workshop
            ws_path = Path(self.workshop_entry.get())
            if not ws_path.exists():
                self._log(self.i18n("workshop_not_found"))
                return

            # 5Ô∏è‚É£ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
            self._log(self.i18n("build_struct_start"))
            self.mod_errors = self._build_mod_structure(parsed, ws_path)

            total_mods = len(self.mod_errors)
            total_errs = sum(
                len(v) if isinstance(v, list) else 0
                for mod in self.mod_errors.values()
                for v in mod.get("errors", {}).values()
            )
            self._log(self.i18n("mods_found").format(count=total_mods, errors=total_errs))

            # 6Ô∏è‚É£ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ GUI
            self._display_mod_tree(self.mod_errors)
            self._log(self.i18n("analysis_done_log"))

        except Exception as e:
            self._log(self.i18n("analysis_failed").format(err=e))

        finally:
            self._scanning = False
            self.scan_btn.config(text="üîç Scan")
            self.progress.stop()
            self.status_var.set("Ready")

    def _find_log_file(self) -> Path | None:
        base = Path(self.logs_entry.get())
        locations = [
            base,
            base / "logs",
            Path.home() / "Documents" / "Paradox Interactive" / "Crusader Kings III" / "logs"
        ]
        for loc in locations:
            f = loc / "error.log"
            if f.exists():
                return f
        return None

    def _read_log_file(self, file_path: Path) -> str | None:
        try:
            with open(file_path, "rb") as f:
                raw = f.read()
                enc = chardet.detect(raw)["encoding"] or "utf-8"
            with open(file_path, "r", encoding=enc, errors="replace") as f:
                return f.read()
        except Exception as e:
            self._log(self.i18n("read_error").format(file=file_path, err=e))
            return None

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CORE STRUCTURE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    def _build_mod_structure(self, parsed_errors, ws_path: Path):
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–æ–¥–æ–≤.
        –î–µ–ª–∞–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π (common/...),
        –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è ENCODING_ERROR.
        """

        import fnmatch

        def _check_bom_encoding(file_path: Path):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ BOM –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
            try:
                with open(file_path, "rb") as f:
                    data = f.read()
                has_bom = data.startswith(b"\xef\xbb\xbf")
                import chardet
                enc = chardet.detect(data)["encoding"] or ""
                ok = enc.lower().startswith("utf") and has_bom
                return ok, enc, has_bom
            except Exception:
                return False, "unknown", False

        mods: dict[str, dict] = {}
        file_index: dict[str, dict[str, Path]] = {}

        mod_dirs = [d for d in ws_path.iterdir() if d.is_dir()]
        total_mods = len(mod_dirs)
        self._log(self.i18n("workshop_index").format(total=total_mods))

        # ‚îÄ‚îÄ‚îÄ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è Workshop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.progress.start()
        for i, mod_dir in enumerate(mod_dirs, 1):
            try:
                info = self.get_mod_info(mod_dir)
                # –¥–æ–±–∞–≤–ª—è–µ–º id –≤–Ω—É—Ç—Ä—å —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Ç–µ—Ä—è–ª—Å—è –ø–æ—Ç–æ–º
                mods[info["id"]] = {
                    "id": info["id"],        # üü¢ –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á id
                    "name": info["name"],
                    "path": str(mod_dir),
                    "errors": {}
                }

                rel_index = {}
                for root, _, files in os.walk(mod_dir):
                    for f in files:
                        if not f.lower().endswith((".txt", ".gui", ".yml", ".csv")):
                            continue
                        try:
                            rel_path = str(Path(root).relative_to(mod_dir) / f).replace("\\", "/").lower()
                            rel_index[rel_path] = Path(root) / f
                        except Exception:
                            continue
                file_index[info["id"]] = rel_index

            except Exception as e:
                self._log(self.i18n("index_error").format(mod=mod_dir, err=e))

            if i % 5 == 0 or i == total_mods:
                self.status_var.set(f"Indexing Workshop... {i}/{total_mods}")
                self.root.update_idletasks()

        self.progress.stop()
        self._log(self.i18n("index_done").format(count=len(file_index)))
        self._log(self.i18n("process_errors").format(count=len(parsed_errors)))

        # ‚îÄ‚îÄ‚îÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.progress.start()
        for i, err in enumerate(parsed_errors, 1):
            if not self._scanning:
                self._log(self.i18n("scan_aborted"))
                break
            if not err.file:
                continue

            # ü©π –¥–æ–±–∞–≤–ª—è–µ–º .txt —Ç–æ–ª—å–∫–æ –¥–ª—è Unrecognized loc key
            if (err.type in {"UNRECOGNIZED_LOC_KEY_SIMPLE", "UNRECOGNIZED_LOC_KEY_NEAR"}
                    and '/' not in err.file
                    and not err.file.lower().endswith(('.txt', '.yml', '.gui', '.dds', '.csv'))):
                rel_key = f"{err.file}.txt"
            else:
                rel_key = err.file.strip().replace("\\", "/").lower().lstrip("./").strip("'")

            # —Å–ø–µ—Ü-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ENCODING_ERROR (BOM-–æ—à–∏–ª–∫–∏)
            if err.type == "ENCODING_ERROR":
                possible_rel_keys = [
                    rel_key,
                    "mod/" + rel_key,
                    "content/" + rel_key,
                    "game/" + rel_key,
                ]
            else:
                possible_rel_keys = [rel_key]

            found_in_mod = None
            found_path: Path | None = None

            # ‚îÄ‚îÄ 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            for rel_variant in possible_rel_keys:
                rel_variant = rel_variant.strip("./").replace("\\", "/").lower()
                for mod_id, mod_info in mods.items():
                    mod_path = Path(mod_info.get("path", ""))
                    if not mod_path.exists():
                        continue
                    candidate = (mod_path / rel_variant).resolve()
                    if candidate.exists():
                        found_in_mod = mod_id
                        found_path = candidate
                        self._log(self.i18n("match_exact").format(file=rel_variant, mod=mod_info["name"]))
                        break
                if found_in_mod:
                    break

            # ‚îÄ‚îÄ 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Ñ–∞–π–ª–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if not found_in_mod:
                for mod_id, rel_index in file_index.items():
                    if rel_key in rel_index:
                        found_in_mod = mod_id
                        found_path = rel_index[rel_key]
                        self._log(self.i18n("match_indexed").format(file=rel_key, mod=mods[mod_id]["name"]))
                        break

            # ‚îÄ‚îÄ 3. –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–¥–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ BOM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if err.type == "ENCODING_ERROR":
                directory, filename = os.path.split(rel_key)
                same_named = []
                for mod_id, rel_index in file_index.items():
                    for rel, p in rel_index.items():
                        if rel.endswith("/" + filename):
                            same_named.append((mod_id, p))

                if not same_named:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                self._log(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(same_named)} —Ñ–∞–π–ª–æ–≤ '{filename}' –≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–∞—Ö:")
                bad_files = []
                for mid, path_ in same_named:
                    ok, enc, has_bom = _check_bom_encoding(path_)
                    status = "OK" if ok else "BAD"
                    self._log(
                        f"   {mods[mid]['name']} ‚Üí {path_.relative_to(ws_path)} "
                        f"| encoding={enc}, BOM={'yes' if has_bom else 'no'} ‚Üí {status}"
                    )
                    if not ok:
                        bad_files.append((mid, path_, enc, has_bom))

                if not bad_files:
                    # –µ—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É
                    self._log(self.i18n("bom_all_ok").format(file=filename))
                    continue

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ bad‚Äë—Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥
                for mid, path_, enc, has_bom in bad_files:
                    mark = "‚úÖ" if has_bom else "‚ùå"
                    self._log(
                        f"{mark} {path_.name}: encoding={enc or 'n/a'}, BOM={'yes' if has_bom else 'no'} "
                        f"‚Üí {mods[mid]['name']}"
                    )
                    mod_info = mods[mid]
                    rel_path = str(path_.relative_to(mod_info["path"])).replace("\\", "/")
                    self._insert_mod_error(mod_info["errors"], rel_path, err)

                continue  # –≤–∞–∂–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –Ω–∏–∂–µ

            # ‚îÄ‚îÄ 4. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if not found_in_mod:
                directory, pattern = os.path.split(rel_key)
                for mod_id, rel_index in file_index.items():
                    for rel, p in rel_index.items():
                        if fnmatch.fnmatch(Path(rel).name.lower(), pattern.lower()):
                            found_in_mod, found_path = mod_id, p
                            break
                if found_in_mod:
                    self._log(self.i18n("match_loose").format(file=pattern, mod=mods[found_in_mod]["name"]))

            # ‚îÄ‚îÄ –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if found_in_mod and found_path:
                try:
                    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è ENCODING_ERROR
                    if err.type == "ENCODING_ERROR":
                        ok, enc, has_bom = _check_bom_encoding(found_path)
                        mark = "‚úÖ" if ok else "‚ùå"
                        self._log(
                            f"{mark} {found_path.name}: encoding={enc or 'n/a'}, BOM={'yes' if has_bom else 'no'} "
                            f"‚Üí {mods[found_in_mod]['name']}"
                        )

                    mod_info = mods[found_in_mod]
                    rel_path = str(found_path.relative_to(mod_info["path"])).replace("\\", "/")
                    self._insert_mod_error(mod_info["errors"], rel_path, err)
                    continue
                except Exception:
                    pass

            # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∫–ª–∞–¥–µ–º –≤ Unknown
            mods.setdefault("Unknown", {"name": "Unknown Origin", "errors": {}})
            self._insert_mod_error(mods["Unknown"]["errors"], rel_key, err)

            if i % 200 == 0 or i == len(parsed_errors):
                self.status_var.set(f"Linking errors... {i}/{len(parsed_errors)}")
                self.root.update_idletasks()

        self.progress.stop()
        self._log(self.i18n("build_struct_done"))

        # –£–±–∏—Ä–∞–µ–º –º–æ–¥—ã –±–µ–∑ –æ—à–∏–±–æ–∫
        mods = {mid: m for mid, m in mods.items() if m.get("errors")}
        return mods

    def _check_mod_conflicts(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ Workshop –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ: –º–æ–¥ ‚Üí —Ñ–∞–π–ª—ã ‚Üí –¥—Ä—É–≥–∏–µ –º–æ–¥—ã.
        """
        t = self.i18n  # üîß –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        self.notebook.select(2)
        self.conf_tree.configure(show="tree headings")  # –≤–∫–ª—é—á–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        self.conf_tree.delete(*self.conf_tree.get_children())

        ws_path = Path(self.workshop_entry.get())
        if not ws_path.exists():
            messagebox.showwarning(self.i18n("analysis_error"), self.i18n("workshop_not_found"))
            return

        self._log(self.i18n("check_conflicts_start"))
        duplicates, replace_paths, dependencies = {}, {}, {}

        mods = [d for d in ws_path.iterdir() if d.is_dir()]
        mod_info: dict[str, dict] = {}

        # ‚îÄ‚îÄ‚îÄ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É ‚îÄ‚îÄ‚îÄ
        for mod_dir in mods:
            mid = mod_dir.name
            desc = mod_dir / "descriptor.mod"
            name, replaces, deps, remote_id = None, [], [], None

            if desc.exists():
                try:
                    with open(desc, "r", encoding="utf-8-sig", errors="ignore") as f:
                        lines = f.readlines()
                    for i, line in enumerate(lines):
                        s = line.strip()
                        if s.lower().startswith("name="):
                            name = s.split("=", 1)[1].strip().strip('"')
                        elif s.lower().startswith("replace_path"):
                            replaces.append(s.split("=", 1)[1].strip().strip('"{} '))
                        elif s.lower().startswith("remote_file_id="):
                            remote_id = s.split("=", 1)[1].strip().strip('"')
                        elif s.lower().startswith("dependencies"):
                            import re
                            joined = "".join(lines[i : i + 20])
                            m = re.search(r"dependencies\s*=\s*\{([^}]*)\}", joined, re.IGNORECASE | re.DOTALL)
                            if m:
                                inner = m.group(1)
                                deps += re.findall(r'"([^"]+)"', inner)
                except Exception as e:
                    self._log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {desc}: {e}")

            mod_info[mid] = {
                "id": mid,
                "name": name or f"Mod_{mid}",
                "replaces": replaces,
                "deps": deps,
                "remote_id": remote_id,
                "files": set(),
            }

            # –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤
            for root, _, files in os.walk(mod_dir):
                for f in files:
                    if not f.lower().endswith((".txt", ".yml", ".gui", ".csv")):
                        continue
                    rel = str(Path(root).relative_to(mod_dir) / f).replace("\\", "/").lower()
                    duplicates.setdefault(rel, []).append(mid)
                    mod_info[mid]["files"].add(rel)

        # ‚îÄ‚îÄ‚îÄ —Å–æ–∑–¥–∞—ë–º –¥–µ—Ä–µ–≤–æ: –º–æ–¥ ‚Üí –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ñ–∞–π–ª—ã ‚îÄ‚îÄ‚îÄ
        for mid, info in sorted(mod_info.items(), key=lambda x: x[1]["name"].lower()):
            mod_node = self.conf_tree.insert(
                "",
                "end",
                text=f"{info['name']} (ID: {mid})",
                values=("", "", "", ""),  # –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏, —Ç–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤–æ
                open=False,
            )

            # replace_path
            for r in info["replaces"]:
                self.conf_tree.insert(mod_node, "end",
                    text=f"[replace_path] {r}",
                    values=("override", "", "", "")
                )

            # dependencies
            if info["deps"]:
                self.conf_tree.insert(mod_node, "end",
                    text=f"[dependencies] {', '.join(info['deps'])}",
                    values=("dependency", "", "", "")
                )

            # –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º
            for file_rel in sorted(info["files"]):
                mod_list = duplicates.get(file_rel, [])
                # –µ—Å–ª–∏ —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è >=2 –º–æ–¥–∞–º–∏)
                if len(mod_list) > 1:
                    others = [mod_info[m]["name"] for m in mod_list if m != mid]
                    self.conf_tree.insert(
                        mod_node,
                        "end",
                        text=file_rel,
                        values=("conflict", t("others_count").format(count=len(others)), ", ".join(others), "")
                    )

        self._log(self.i18n("check_conflicts_done"))

    def _insert_mod_error(self, tree, rel_path, err: ParsedError):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥/–ø–∞–ø–∫–∞/—Ñ–∞–π–ª"""
        parts = rel_path.split("/")
        node = tree
        for p in parts[:-1]:
            node = node.setdefault(p, {})
        node.setdefault(parts[-1], []).append(err)

    def get_mod_info(self, mod_dir: Path):
        """–ß–∏—Ç–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–∞ –¥–∞–∂–µ –ø—Ä–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö .mod —Ñ–∞–π–ª–∞—Ö"""
        mod_id = mod_dir.name
        if mod_id in self.mod_cache:
            return self.mod_cache[mod_id]

        mod_name = f"Mod_{mod_id}"
        mod_path = str(mod_dir)

        # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî descriptor.mod –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        candidates = [
            mod_dir / "descriptor.mod",
            mod_dir / f"{mod_id}.mod"
        ]

        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ *.mod –∏–∑ –∫–æ—Ä–Ω—è
        mod_files = list(mod_dir.glob("*.mod"))
        for f in mod_files:
            if f not in candidates:
                candidates.append(f)

        # –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∏—Å–∫–∞—Ç—å name=
        for desc in candidates:
            if not desc.exists():
                continue
            try:
                with open(desc, "r", encoding="utf-8-sig", errors="ignore") as f:
                    for line in f:
                        line = line.strip()
                        if line.lower().startswith("name="):
                            raw = line.split("=", 1)[1].strip().strip('"')
                            if raw:
                                mod_name = raw
                                break
            except Exception as e:
                self._log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {desc}: {e}")
            if mod_name != f"Mod_{mod_id}":
                break  # –Ω–∞—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è ‚Äî –≤—ã—Ö–æ–¥–∏–º

        info = {"id": mod_id, "name": mod_name, "path": mod_path}
        self.mod_cache[mod_id] = info
        return info

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TREE DISPLAY ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _display_mod_tree(self, mods):
        self.tree.delete(*self.tree.get_children())
        for mod_id, mod in sorted(mods.items(), key=lambda x: x[1]["name"].lower()):
            mod_node = self.tree.insert(
                "",
                "end",
                text=f"{mod['name']} (ID: {mod_id})",
                open=False,
                values=("", "", "", "", "", mod_id)  # üü¢ –¥–æ–±–∞–≤–ª—è–µ–º id –º–æ–¥–∞ –∫–∞–∫ 6‚Äë–π —ç–ª–µ–º–µ–Ω—Ç
            )
            self._add_tree_nodes(mod_node, mod["errors"], mod_id=mod_id)

    def _add_tree_nodes(self, parent, data, prefix="", mod_id=None):
        for name, content in sorted(data.items(), key=lambda x: x[0].lower()):
            new_prefix = f"{prefix}/{name}" if prefix else name
            if isinstance(content, dict):
                node = self.tree.insert(
                    parent, "end",
                    text=name,
                    values=("", "", "", "", new_prefix, mod_id)  # üü¢ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—É—Ç—å, –∏ –º–æ–¥
                )
                self._add_tree_nodes(node, content, new_prefix, mod_id)
            else:
                real_file_path = ""
                for err in content:
                    if err.file:
                        real_file_path = err.file
                        break
                file_node = self.tree.insert(
                    parent, "end",
                    text=name,
                    values=("", "", "", "", real_file_path or new_prefix, mod_id)
                )
                for err in sorted(content,
                                  key=lambda e: int(e.line) if (e.line and str(e.line).isdigit()) else 0):
                    self.tree.insert(
                        file_node,
                        "end",
                        values=(
                            err.type,
                            err.line or "",
                            err.message or "",
                            err.log_line or "",
                            err.file or new_prefix,
                            mod_id,  # üü¢ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º id –º–æ–¥–∞ –≤ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ
                        )
                    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _open_selected_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç—É –ø–∞–ø–∫—É, —á—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –º–æ–¥—É."""
        sel = self.tree.selection()
        if not sel:
            messagebox.showinfo(self.i18n("no_selection"), self.i18n("select_error"))
            return

        item = sel[0]
        vals = self.tree.item(item, "values")
        rel_path = (vals[4] or "") if len(vals) >= 5 else ""
        mod_id = (vals[5] or "") if len(vals) >= 6 else ""
        rel_path = rel_path.replace("\\", "/").lstrip("./").strip("'")

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –º–æ–¥
        if not rel_path and mod_id:
            mod = self.mod_errors.get(mod_id)
            if mod and mod.get("path"):
                os.startfile(mod["path"])
                self._log(self.i18n("mod_folder_opened").format(path=mod["path"]))
                return
            messagebox.showinfo(self.i18n("not_found"), self.i18n("no_mod").format(file=mod_id))
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞
        target_mod = self.mod_errors.get(mod_id)
        if not target_mod:
            messagebox.showinfo(self.i18n("not_found"), self.i18n("no_mod").format(file=rel_path))
            return

        mod_path = Path(target_mod["path"])
        target = (mod_path / rel_path).resolve()
        if target.exists():
            folder = target if target.is_dir() else target.parent
            os.startfile(folder)
            self._log(self.i18n("folder_opened").format(path=folder))
        else:
            messagebox.showinfo(self.i18n("not_found"), self.i18n("missing_dir").format(path=rel_path, mod=mod_path))
            self._log(self.i18n("folder_not_found").format(path=rel_path, mod=mod_path))

    def _open_selected_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–æ–¥—É."""
        sel = self.tree.selection()
        if not sel:
            messagebox.showinfo(self.i18n("no_selection"), self.i18n("select_error"))
            return

        item = sel[0]
        vals = self.tree.item(item, "values")
        rel_path = (vals[4] or "") if len(vals) >= 5 else ""
        mod_id = (vals[5] or "") if len(vals) >= 6 else ""
        if not rel_path:
            rel_path = self.tree.item(item, "text")
        rel_path = rel_path.replace("\\", "/").lstrip("./").strip("'")

        target_mod = self.mod_errors.get(mod_id)
        if not target_mod:
            messagebox.showinfo(self.i18n("not_found"), self.i18n("no_mod").format(file=rel_path))
            return

        p = (Path(target_mod["path"]) / rel_path).resolve()
        if p.exists():
            if p.is_dir():
                messagebox.showinfo(self.i18n("directory"), f"{p} ‚Äî {self.i18n('directory').lower()}.")
                self._log(self.i18n("skip_dir").format(path=p))
                return
            os.startfile(p)
            self._log(self.i18n("file_opened").format(file=p))
        else:
            messagebox.showinfo(self.i18n("not_found"),
                    self.i18n("file_not_in_mod").format(file=rel_path, mod=target_mod["name"]))
            self._log(self.i18n("file_not_found").format(file=rel_path, mod=mod_id))

    def _show_errorline_in_log(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç error.log –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–µ, –≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        log_file = self._find_log_file()
        if not log_file or not log_file.exists():
            messagebox.showinfo(self.i18n("no_error_log"), self.i18n("no_error_log"))
            return

        sel = self.tree.selection()
        if not sel:
            messagebox.showinfo(self.i18n("no_error"), self.i18n("select_error"))
            return

        item = sel[0]
        parent = self.tree.parent(item)

        # üö´ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ —ç–ª–µ–º–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π
        if not parent:
            messagebox.showinfo(self.i18n("no_error"), self.i18n("choose_node"))
            return

        values = self.tree.item(item, "values")
        if not values or len(values) < 4:
            messagebox.showinfo(self.i18n("no_data"), self.i18n("warn_no_data"))
            return

        # log_line —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ 4‚Äë–º —ç–ª–µ–º–µ–Ω—Ç–µ values
        log_line = values[3]
        if not log_line or not str(log_line).isdigit():
            messagebox.showinfo(self.i18n("no_link"), self.i18n("select_errorline"))
            return

        line_num = int(log_line)
        self._open_file_at_line(log_file, line_num)
        self._log(f"ü™∂ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–æ–∫–µ {line_num} –≤ error.log ({log_file})")

    def _open_error_log(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç error.log –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ."""
        log_file = self._find_log_file()
        if not log_file or not log_file.exists():
            messagebox.showinfo(self.i18n("no_error_log"), self.i18n("no_error_log"))
            return

        editor = self.editor_choice.get()

        import shutil, subprocess
        if editor == "vscode":
            exe = shutil.which("code")
            if exe:
                subprocess.Popen([exe, str(log_file)])
                return
        elif editor == "notepadpp":
            exe = shutil.which("notepad++")
            if exe:
                subprocess.Popen([exe, str(log_file)])
                return

        os.startfile(log_file)
        self._log(self.i18n("editor_not_found").format(file=log_file))

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –≤—ã–±–æ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _on_tree_select(self, event):
        sel = self.tree.selection()
        if not sel:
            return
        item = sel[0]
        vals = self.tree.item(item, "values")
        if not vals:
            return

        # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏
        err_type = vals[0] if len(vals) > 0 else ""
        err_line = vals[1] if len(vals) > 1 else ""
        err_msg  = vals[2] if len(vals) > 2 else ""
        text = self.tree.item(item, "text")


        t = self.i18n
        self.file_label.config(text=f"{t('file')}: {text}")
        self.line_label.config(text=f"{t('line')}: {err_line or '‚Äî'}")
        self.type_label.config(text=f"{t('type')}: {err_type or '‚Äî'}")
        msg_short = (err_msg if len(err_msg) < 150 else err_msg[:147] + "‚Ä¶")
        self.msg_label.config(text=f"{t('message')}: {msg_short}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ EXPORT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def export_json(self):
        if not self.mod_errors:
            messagebox.showwarning(self.i18n("no_data"), self.i18n("warn_no_data"))
            return
        path = filedialog.asksaveasfilename(defaultextension=".json",
                                            filetypes=[("JSON", "*.json")])
        if not path:
            return
        try:
            data = {}
            for mod_id, mod in self.mod_errors.items():
                data[mod_id] = {
                    "name": mod["name"],
                    "errors": self._flatten_errors(mod["errors"])
                }
            with open(path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            messagebox.showinfo(self.i18n("export_done"), self.i18n("export_success").format(path=path))
        except Exception as e:
            messagebox.showerror(self.i18n("analysis_error"), self.i18n("export_failed").format(err=e))

    def _flatten_errors(self, errors_tree):
        """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –¥–ª—è JSON —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        flat = {}

        def walk(prefix, node):
            for k, v in node.items():
                if isinstance(v, dict):
                    walk(prefix + "/" + k if prefix else k, v)
                else:
                    flat[prefix + "/" + k if prefix else k] = [e.to_dict() for e in v]

        walk("", errors_tree)
        return flat

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UTILITY ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def toggle_scope(self):
        self.show_scope = not self.show_scope

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ POPUP –î–õ–Ø "–î–†–£–ì–ò–ï –ú–û–î–´" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _on_conflict_double_click(self, event):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤ –¥–µ—Ä–µ–≤–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."""
        item = self.conf_tree.identify_row(event.y)
        column = self.conf_tree.identify_column(event.x)
        if not item or column != "#3":  # "#3" ‚Äî —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü ("mods")
            return

        values = self.conf_tree.item(item, "values")
        if not values or len(values) < 3:
            return

        mods_raw = values[2] or ""
        if not mods_raw.strip():
            return

        mods_list = [m.strip() for m in mods_raw.split(",") if m.strip()]
        if not mods_list:
            return

        self._show_mods_popup(mods_list, x=event.x_root, y=event.y_root)

    def _show_mods_popup(self, mods_list, x=0, y=0):
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–º —Å–ø–∏—Å–∫–æ–º '–î—Ä—É–≥–∏–µ –º–æ–¥—ã'."""
        popup = tk.Toplevel(self.root)
        popup.title(self.i18n("col_mods"))
        popup.geometry(f"250x200+{x}+{y}")
        popup.resizable(False, False)
        popup.transient(self.root)

        frame = ttk.Frame(popup, padding=5)
        frame.pack(fill=tk.BOTH, expand=True)

        listbox = tk.Listbox(frame, activestyle="dotbox", selectmode=tk.BROWSE)
        for mod_name in mods_list:
            listbox.insert(tk.END, mod_name)

        yscroll = ttk.Scrollbar(frame, orient="vertical", command=listbox.yview)
        listbox.configure(yscrollcommand=yscroll.set)

        listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        yscroll.pack(side=tk.RIGHT, fill=tk.Y)

        ttk.Button(popup, text=self.i18n("close"), command=popup.destroy).pack(pady=4)


import os, sys, threading
import pystray
from PIL import Image

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def create_tray_icon(app):
    """–°–æ–∑–¥–∞—ë—Ç –∏–∫–æ–Ω–∫—É –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤ —Ç—Ä–µ–π, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∫–Ω–æ)."""

    # –Ω–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ icon.ico (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏ .py, –∏ –ø—Ä–∏ .exe)
    if getattr(sys, 'frozen', False):
        base_path = sys._MEIPASS   # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ PyInstaller
    else:
        base_path = os.path.dirname(os.path.abspath(__file__))

    icon_path = os.path.join(base_path, "icon.ico")

    # –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç ‚Äî –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    try:
        image = Image.open(icon_path)
    except Exception:
        image = Image.new("RGB", (64, 64), "gray")

    # –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –º–µ–Ω—é —Ç—Ä–µ—è
    def on_open(icon, item):
        app.root.deiconify()
        app.root.after(0, app.root.lift)

    def on_quit(icon, item):
        # –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        icon.stop()
        app.root.after(0, app.root.destroy)

    menu = pystray.Menu(
        pystray.MenuItem(app.i18n("show_window"), on_open),
        pystray.MenuItem(app.i18n("exit"), on_quit)
    )
    tray_icon = pystray.Icon("ck3logparser", image, "CK3 Log Analyzer", menu)
    app.tray_icon = tray_icon
    threading.Thread(target=tray_icon.run, daemon=True).start()
    print(app.i18n("tray_created"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ Tkinter ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    import sys, os, threading, pystray
    from PIL import Image

    if getattr(sys, 'frozen', False):
        application_path = sys._MEIPASS
    else:
        application_path = os.path.dirname(os.path.abspath(__file__))

    icon_file = os.path.join(application_path, "icon.ico")

    root = tk.Tk()
    app = CK3LogParser(root)

    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
    if os.path.exists(icon_file):
        try:
            root.iconbitmap(icon_file)
        except Exception as e:
            print(app.i18n("icon_load_error").format(err=e))

    # —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
    create_tray_icon(app)

    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    def on_exit():
        if hasattr(app, "tray_icon"):
            try:
                app.tray_icon.stop()
            except Exception:
                pass
        root.destroy()

    root.protocol("WM_DELETE_WINDOW", on_exit)
    root.mainloop()